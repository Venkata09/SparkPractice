
http://www.jianshu.com/p/34729f9f833c

Preface

Found that there is no such article, and he is also more curious about this, so there is this content.

Analysis is basically bottom-up, that is, we analyze the line from the most basic memory applications to the upper use. We assume that you have some basic understanding of the sun.misc.Unsafe API.

In-heap and off-heap (MemoryAllocator)

First we look at the Tungsten MemoryAllocator

off-heap => org.apache.spark.unsafe.memory.UnsafeMemoryAllocator

in-heap => org.apache.spark.unsafe.memory.HeapMemoryAllocator
Off-heap Get memory is simple:

long address = Platform.allocateMemory(size);
This will get the address of the memory. This is an absolute address, 64bit should be big enough. Note that all memory requires 8byte alignment.

In-heap is to maintain a long array of types:

 long[] array = new long[(int) (size / 8)];
And then get the address of Platform.LONG_ARRAY_OFFSET, and the relative address of the array object, so that we can get an absolute address, and the operation. In-heap object has a feature, if the GC, the address may change, so we need to always hold the array reference.

Regardless of the off-heap, in-heap is actually the address management, so we abstracted a class to describe this information.

 org.apache.spark.unsafe.memory.MemoryBlock
There are four attributes:

obj  如果是off-heap,则为null。否则则为一个array数组

offset 如果是off-heap 则为绝对偏移量，否则为  Platform.LONG_ARRAY_OFFSET

pageNumber

length 申请的内存的长度，这个in/off-heap 是一致的。
Memory Manager (Memory Manager)

The actual memory management is placed in two levels:

org.apache.spark.unsafe.memory.ExecutorMemoryManager
org.apache.spark.unsafe.memory.TaskMemoryManager
We first analyze their relationship, TaskMemeoryManager is for each Task, but these tasks are running on a JVM instance, corresponding to the Executor, so the memory should be unified management by the ExecutorMemoryManager. But each task needs to interact, so let TaskMemeoryManager to carry out this interaction. This is their division of labor, the design is very beautiful.

ExecutorMemoryManager

We first analyze the next ExecutorMemoryManager, according to your configuration, decided to use what kind of MemoryAllocator, the default is in-heap. You can of course set up by:

 spark.unsafe.offHeap=true
To turn off the off-heap mode.

In addition, if you find that you are using in-heap mode, then ExecutorMemoryManage will maintain a MemoryBlock pool, object pool, we should be very familiar with. Why only in in-heap mode has a pond? It is because in-heap need to apply long [] array, maintenance of a pool, do not have to go to heap repeatedly apply for action.

This class has two core methods:

 MemoryBlock allocate(long size)
 void free(MemoryBlock memory)
Look at the name to know the meaning: apply for memory and release memory. The memory unit is MemoryBlock, which is logically the concept of Page.

TaskMemeoryManager

This will be more complicated. However, in fact, no more complex, well I began to make guys chatter the problem (O (∩ _ ∩) O).

In order to unify the in-heap, off-heap modeling, to avoid the upper application to distinguish their own processing in-heap or off-heap memory block, so this time put forward a Page concept, and the use of logical address Do the pointer, through this logical address can be positioned to a specific record in the MemoryBlock position.

So how does the logical address mean? The answer is represented by a Long type (64-bit). The location of any record can be recorded with a Long.

We first analyze the complex, in-heap mode:

[13-bit page num][54-bit offset]
This will be able to represent 8192 pages. A Page corresponds to a MemoryBlock. Then 54-bit can represent the Pb level, that is to say that the MemoryBlock can be super big.

However, if you remember the in-heap mode mentioned above in the use of a long [] array as a data store, then the maximum length of long is limited to the maximum Int, 2 ^ 32 * 8, that is, 32GB. Then all the pages add up to about 35 TB. Enough is big enough.

Of course, here is the limit here, in the upper, such as shuffle, there may be other restrictions, resulting in the memory can be smaller. This follow-up article will be further elaborated.

The process of applying for a Page is:

Apply to the free number
Make the actual memory allocation and get a MemoryBlock
Assign Page number to MemoryBlock
Also this class also provides a method that does not use the Page management application memory, and then allocatedNonPageMemorytrack the object.

Get MemoryBlock, on behalf of we really get the memory, and now we have to do one thing, that is, a record with a long type of expression, TaskMemoryManager provides a encodePageNumberAndOffset(MemoryBlock page, long offsetInPage)way to code, the way it is encoded that:

  [13-bit page num][54-bit offset]
The internal specific is some bit of the operation. Corresponding to the various decode method.

You will be curious, only offset, how do you know the length of a record? This length should also be stored in order to restore a message back?

The basic practice is to start from offset, the first four bytes to represent the length of this record, and then put a specific byte array. In order to explain this problem, I UnsafeShuffleExternalSorterdeduct a piece of code from the class:

获得这条记录的逻辑地址，也就是一个64-bit的编码
final long recordAddress =  taskMemoryManager.encodePageNumberAndOffset(dataPage, dataPagePosition);
//dataPageBaseObject 其实就是数组对象的地址，然后以他为基准， 在dataPagePosition 处写入一个int类型数据，这个就是内容的长度。实际的内容就会放到这个位置之后
Platform.putInt(dataPageBaseObject, dataPagePosition, lengthInBytes);
//最后把数据要拷贝的实际的内存中，就需要多要4个字节了。所以这里要加回来
dataPagePosition += 4;
Platform.copyMemory(  recordBaseObject, recordBaseOffset, dataPageBaseObject, dataPagePosition, lengthInBytes);
The above analysis is in-heap. That off-heap?
The whole process is also consistent. The difference is that off-heap get absolute address, not a page of the offset, in order to unified processing, in the encoding, we have to pass the following formula to re-count off-heap in the page relative position:

   offsetInPage -= page.getBaseOffset();
Here, page.getBaseOffset () is the starting position of the corresponding memory block of the page, that is, the offset variable of the MemoryBlock. If you still remember the way off-heap to apply for MemoryBlock, this is the beginning to get the offset.

This will get relative to the relative address of the MemoryBlock, and processing can and in-heap consistent.

Parsing time, that is, in turn on the line, to get the actual absolute address, and then similar to in-heap, the first four bytes to write the length, followed by writing the actual content.

to sum up

We see, Spark Tungsten, the memory management mechanism is still relatively simple and clear. Understand that this may be useful is not very big, for the actual application of the right, as a fun bar.



